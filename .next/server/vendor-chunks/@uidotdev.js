"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@uidotdev";
exports.ids = ["vendor-chunks/@uidotdev"];
exports.modules = {

/***/ "(ssr)/./node_modules/@uidotdev/usehooks/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@uidotdev/usehooks/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBattery: () => (/* binding */ useBattery),\n/* harmony export */   useClickAway: () => (/* binding */ useClickAway),\n/* harmony export */   useCopyToClipboard: () => (/* binding */ useCopyToClipboard),\n/* harmony export */   useCounter: () => (/* binding */ useCounter),\n/* harmony export */   useDebounce: () => (/* binding */ useDebounce),\n/* harmony export */   useDefault: () => (/* binding */ useDefault),\n/* harmony export */   useDocumentTitle: () => (/* binding */ useDocumentTitle),\n/* harmony export */   useFavicon: () => (/* binding */ useFavicon),\n/* harmony export */   useGeolocation: () => (/* binding */ useGeolocation),\n/* harmony export */   useHistoryState: () => (/* binding */ useHistoryState),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useIdle: () => (/* binding */ useIdle),\n/* harmony export */   useIntersectionObserver: () => (/* binding */ useIntersectionObserver),\n/* harmony export */   useIsClient: () => (/* binding */ useIsClient),\n/* harmony export */   useIsFirstRender: () => (/* binding */ useIsFirstRender),\n/* harmony export */   useList: () => (/* binding */ useList),\n/* harmony export */   useLocalStorage: () => (/* binding */ useLocalStorage),\n/* harmony export */   useLockBodyScroll: () => (/* binding */ useLockBodyScroll),\n/* harmony export */   useLongPress: () => (/* binding */ useLongPress),\n/* harmony export */   useMap: () => (/* binding */ useMap),\n/* harmony export */   useMeasure: () => (/* binding */ useMeasure),\n/* harmony export */   useMediaQuery: () => (/* binding */ useMediaQuery),\n/* harmony export */   useMouse: () => (/* binding */ useMouse),\n/* harmony export */   useNetworkState: () => (/* binding */ useNetworkState),\n/* harmony export */   useObjectState: () => (/* binding */ useObjectState),\n/* harmony export */   useOrientation: () => (/* binding */ useOrientation),\n/* harmony export */   usePreferredLanguage: () => (/* binding */ usePreferredLanguage),\n/* harmony export */   usePrevious: () => (/* binding */ usePrevious),\n/* harmony export */   useQueue: () => (/* binding */ useQueue),\n/* harmony export */   useRenderCount: () => (/* binding */ useRenderCount),\n/* harmony export */   useRenderInfo: () => (/* binding */ useRenderInfo),\n/* harmony export */   useScript: () => (/* binding */ useScript),\n/* harmony export */   useSessionStorage: () => (/* binding */ useSessionStorage),\n/* harmony export */   useSet: () => (/* binding */ useSet),\n/* harmony export */   useThrottle: () => (/* binding */ useThrottle),\n/* harmony export */   useToggle: () => (/* binding */ useToggle),\n/* harmony export */   useVisibilityChange: () => (/* binding */ useVisibilityChange),\n/* harmony export */   useWindowScroll: () => (/* binding */ useWindowScroll),\n/* harmony export */   useWindowSize: () => (/* binding */ useWindowSize)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction isShallowEqual(object1, object2) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (let key of keys1){\n        if (object1[key] !== object2[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isTouchEvent({ nativeEvent }) {\n    return window.TouchEvent ? nativeEvent instanceof TouchEvent : \"touches\" in nativeEvent;\n}\nfunction isMouseEvent(event) {\n    return event.nativeEvent instanceof MouseEvent;\n}\nfunction throttle(cb, ms) {\n    let lastTime = 0;\n    return ()=>{\n        const now = Date.now();\n        if (now - lastTime >= ms) {\n            cb();\n            lastTime = now;\n        }\n    };\n}\nfunction isPlainObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\nfunction dispatchStorageEvent(key, newValue) {\n    window.dispatchEvent(new StorageEvent(\"storage\", {\n        key,\n        newValue\n    }));\n}\nfunction useBattery() {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        supported: true,\n        loading: true,\n        level: null,\n        charging: null,\n        chargingTime: null,\n        dischargingTime: null\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!navigator.getBattery) {\n            setState((s)=>({\n                    ...s,\n                    supported: false,\n                    loading: false\n                }));\n            return;\n        }\n        let battery = null;\n        const handleChange = ()=>{\n            setState({\n                supported: true,\n                loading: false,\n                level: battery.level,\n                charging: battery.charging,\n                chargingTime: battery.chargingTime,\n                dischargingTime: battery.dischargingTime\n            });\n        };\n        navigator.getBattery().then((b)=>{\n            battery = b;\n            handleChange();\n            b.addEventListener(\"levelchange\", handleChange);\n            b.addEventListener(\"chargingchange\", handleChange);\n            b.addEventListener(\"chargingtimechange\", handleChange);\n            b.addEventListener(\"dischargingtimechange\", handleChange);\n        });\n        return ()=>{\n            if (battery) {\n                battery.removeEventListener(\"levelchange\", handleChange);\n                battery.removeEventListener(\"chargingchange\", handleChange);\n                battery.removeEventListener(\"chargingtimechange\", handleChange);\n                battery.removeEventListener(\"dischargingtimechange\", handleChange);\n            }\n        };\n    }, []);\n    return state;\n}\nfunction useClickAway(cb) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const refCb = react__WEBPACK_IMPORTED_MODULE_0__.useRef(cb);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        refCb.current = cb;\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const handler = (e)=>{\n            const element = ref.current;\n            if (element && !element.contains(e.target)) {\n                refCb.current(e);\n            }\n        };\n        document.addEventListener(\"mousedown\", handler);\n        document.addEventListener(\"touchstart\", handler);\n        return ()=>{\n            document.removeEventListener(\"mousedown\", handler);\n            document.removeEventListener(\"touchstart\", handler);\n        };\n    }, []);\n    return ref;\n}\nfunction oldSchoolCopy(text) {\n    const tempTextArea = document.createElement(\"textarea\");\n    tempTextArea.value = text;\n    document.body.appendChild(tempTextArea);\n    tempTextArea.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(tempTextArea);\n}\nfunction useCopyToClipboard() {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const copyToClipboard = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((value)=>{\n        const handleCopy = async ()=>{\n            try {\n                if (navigator?.clipboard?.writeText) {\n                    await navigator.clipboard.writeText(value);\n                    setState(value);\n                } else {\n                    throw new Error(\"writeText not supported\");\n                }\n            } catch (e) {\n                oldSchoolCopy(value);\n                setState(value);\n            }\n        };\n        handleCopy();\n    }, []);\n    return [\n        state,\n        copyToClipboard\n    ];\n}\nfunction useCounter(startingValue = 0, options = {}) {\n    const { min, max } = options;\n    if (typeof min === \"number\" && startingValue < min) {\n        throw new Error(`Your starting value of ${startingValue} is less than your min of ${min}.`);\n    }\n    if (typeof max === \"number\" && startingValue > max) {\n        throw new Error(`Your starting value of ${startingValue} is greater than your max of ${max}.`);\n    }\n    const [count, setCount] = react__WEBPACK_IMPORTED_MODULE_0__.useState(startingValue);\n    const increment = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        setCount((c)=>{\n            const nextCount = c + 1;\n            if (typeof max === \"number\" && nextCount > max) {\n                return c;\n            }\n            return nextCount;\n        });\n    }, [\n        max\n    ]);\n    const decrement = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        setCount((c)=>{\n            const nextCount = c - 1;\n            if (typeof min === \"number\" && nextCount < min) {\n                return c;\n            }\n            return nextCount;\n        });\n    }, [\n        min\n    ]);\n    const set = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((nextCount)=>{\n        setCount((c)=>{\n            if (typeof max === \"number\" && nextCount > max) {\n                return c;\n            }\n            if (typeof min === \"number\" && nextCount < min) {\n                return c;\n            }\n            return nextCount;\n        });\n    }, [\n        max,\n        min\n    ]);\n    const reset = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        setCount(startingValue);\n    }, [\n        startingValue\n    ]);\n    return [\n        count,\n        {\n            increment,\n            decrement,\n            set,\n            reset\n        }\n    ];\n}\nfunction useDebounce(value, delay) {\n    const [debouncedValue, setDebouncedValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(value);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const handler = setTimeout(()=>{\n            setDebouncedValue(value);\n        }, delay);\n        return ()=>{\n            clearTimeout(handler);\n        };\n    }, [\n        value,\n        delay\n    ]);\n    return debouncedValue;\n}\nfunction useDefault(initialValue, defaultValue) {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialValue);\n    if (typeof state === \"undefined\" || state === null) {\n        return [\n            defaultValue,\n            setState\n        ];\n    }\n    return [\n        state,\n        setState\n    ];\n}\nfunction useDocumentTitle(title) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        document.title = title;\n    }, [\n        title\n    ]);\n}\nfunction useFavicon(url) {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let link = document.querySelector(`link[rel~=\"icon\"]`);\n        if (!link) {\n            link = document.createElement(\"link\");\n            link.type = \"image/x-icon\";\n            link.rel = \"icon\";\n            link.href = url;\n            document.head.appendChild(link);\n        } else {\n            link.href = url;\n        }\n    }, [\n        url\n    ]);\n}\nfunction useGeolocation(options = {}) {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        loading: true,\n        accuracy: null,\n        altitude: null,\n        altitudeAccuracy: null,\n        heading: null,\n        latitude: null,\n        longitude: null,\n        speed: null,\n        timestamp: null,\n        error: null\n    });\n    const optionsRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(options);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const onEvent = ({ coords, timestamp })=>{\n            setState({\n                loading: false,\n                timestamp,\n                latitude: coords.latitude,\n                longitude: coords.longitude,\n                altitude: coords.altitude,\n                accuracy: coords.accuracy,\n                altitudeAccuracy: coords.altitudeAccuracy,\n                heading: coords.heading,\n                speed: coords.speed\n            });\n        };\n        const onEventError = (error)=>{\n            setState((s)=>({\n                    ...s,\n                    loading: false,\n                    error\n                }));\n        };\n        navigator.geolocation.getCurrentPosition(onEvent, onEventError, optionsRef.current);\n        const watchId = navigator.geolocation.watchPosition(onEvent, onEventError, optionsRef.current);\n        return ()=>{\n            navigator.geolocation.clearWatch(watchId);\n        };\n    }, []);\n    return state;\n}\nconst initialUseHistoryStateState = {\n    past: [],\n    present: null,\n    future: []\n};\nconst useHistoryStateReducer = (state, action)=>{\n    const { past, present, future } = state;\n    if (action.type === \"UNDO\") {\n        return {\n            past: past.slice(0, past.length - 1),\n            present: past[past.length - 1],\n            future: [\n                present,\n                ...future\n            ]\n        };\n    } else if (action.type === \"REDO\") {\n        return {\n            past: [\n                ...past,\n                present\n            ],\n            present: future[0],\n            future: future.slice(1)\n        };\n    } else if (action.type === \"SET\") {\n        const { newPresent } = action;\n        if (action.newPresent === present) {\n            return state;\n        }\n        return {\n            past: [\n                ...past,\n                present\n            ],\n            present: newPresent,\n            future: []\n        };\n    } else if (action.type === \"CLEAR\") {\n        return {\n            ...initialUseHistoryStateState,\n            present: action.initialPresent\n        };\n    } else {\n        throw new Error(\"Unsupported action type\");\n    }\n};\nfunction useHistoryState(initialPresent = {}) {\n    const initialPresentRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(initialPresent);\n    const [state, dispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(useHistoryStateReducer, {\n        ...initialUseHistoryStateState,\n        present: initialPresentRef.current\n    });\n    const canUndo = state.past.length !== 0;\n    const canRedo = state.future.length !== 0;\n    const undo = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        if (canUndo) {\n            dispatch({\n                type: \"UNDO\"\n            });\n        }\n    }, [\n        canUndo\n    ]);\n    const redo = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        if (canRedo) {\n            dispatch({\n                type: \"REDO\"\n            });\n        }\n    }, [\n        canRedo\n    ]);\n    const set = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((newPresent)=>dispatch({\n            type: \"SET\",\n            newPresent\n        }), []);\n    const clear = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>dispatch({\n            type: \"CLEAR\",\n            initialPresent: initialPresentRef.current\n        }), []);\n    return {\n        state: state.present,\n        set,\n        undo,\n        redo,\n        clear,\n        canUndo,\n        canRedo\n    };\n}\nfunction useHover() {\n    const [hovering, setHovering] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const previousNode = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const handleMouseEnter = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        setHovering(true);\n    }, []);\n    const handleMouseLeave = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        setHovering(false);\n    }, []);\n    const customRef = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        if (previousNode.current?.nodeType === Node.ELEMENT_NODE) {\n            previousNode.current.removeEventListener(\"mouseenter\", handleMouseEnter);\n            previousNode.current.removeEventListener(\"mouseleave\", handleMouseLeave);\n        }\n        if (node?.nodeType === Node.ELEMENT_NODE) {\n            node.addEventListener(\"mouseenter\", handleMouseEnter);\n            node.addEventListener(\"mouseleave\", handleMouseLeave);\n        }\n        previousNode.current = node;\n    }, [\n        handleMouseEnter,\n        handleMouseLeave\n    ]);\n    return [\n        customRef,\n        hovering\n    ];\n}\nfunction useIdle(ms = 1000 * 60) {\n    const [idle, setIdle] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let timeoutId;\n        const handleTimeout = ()=>{\n            setIdle(true);\n        };\n        const handleEvent = throttle((e)=>{\n            setIdle(false);\n            window.clearTimeout(timeoutId);\n            timeoutId = window.setTimeout(handleTimeout, ms);\n        }, 500);\n        const handleVisibilityChange = ()=>{\n            if (!document.hidden) {\n                handleEvent();\n            }\n        };\n        timeoutId = window.setTimeout(handleTimeout, ms);\n        window.addEventListener(\"mousemove\", handleEvent);\n        window.addEventListener(\"mousedown\", handleEvent);\n        window.addEventListener(\"resize\", handleEvent);\n        window.addEventListener(\"keydown\", handleEvent);\n        window.addEventListener(\"touchstart\", handleEvent);\n        window.addEventListener(\"wheel\", handleEvent);\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n        return ()=>{\n            window.removeEventListener(\"mousemove\", handleEvent);\n            window.removeEventListener(\"mousedown\", handleEvent);\n            window.removeEventListener(\"resize\", handleEvent);\n            window.removeEventListener(\"keydown\", handleEvent);\n            window.removeEventListener(\"touchstart\", handleEvent);\n            window.removeEventListener(\"wheel\", handleEvent);\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            window.clearTimeout(timeoutId);\n        };\n    }, [\n        ms\n    ]);\n    return idle;\n}\nfunction useIntersectionObserver(options = {}) {\n    const { threshold = 1, root = null, rootMargin = \"0px\" } = options;\n    const [entry, setEntry] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const previousObserver = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const customRef = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        if (previousObserver.current) {\n            previousObserver.current.disconnect();\n            previousObserver.current = null;\n        }\n        if (node?.nodeType === Node.ELEMENT_NODE) {\n            const observer = new IntersectionObserver(([entry])=>{\n                setEntry(entry);\n            }, {\n                threshold,\n                root,\n                rootMargin\n            });\n            observer.observe(node);\n            previousObserver.current = observer;\n        }\n    }, [\n        threshold,\n        root,\n        rootMargin\n    ]);\n    return [\n        customRef,\n        entry\n    ];\n}\nfunction useIsClient() {\n    const [isClient, setIsClient] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setIsClient(true);\n    }, []);\n    return isClient;\n}\nfunction useIsFirstRender() {\n    const renderRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(true);\n    if (renderRef.current === true) {\n        renderRef.current = false;\n        return true;\n    }\n    return renderRef.current;\n}\nfunction useList(defaultList = []) {\n    const [list, setList] = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultList);\n    const set = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((l)=>{\n        setList(l);\n    }, []);\n    const push = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((element)=>{\n        setList((l)=>[\n                ...l,\n                element\n            ]);\n    }, []);\n    const removeAt = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((index)=>{\n        setList((l)=>[\n                ...l.slice(0, index),\n                ...l.slice(index + 1)\n            ]);\n    }, []);\n    const insertAt = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((index, element)=>{\n        setList((l)=>[\n                ...l.slice(0, index),\n                element,\n                ...l.slice(index)\n            ]);\n    }, []);\n    const updateAt = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((index, element)=>{\n        setList((l)=>l.map((e, i)=>i === index ? element : e));\n    }, []);\n    const clear = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>setList([]), []);\n    return [\n        list,\n        {\n            set,\n            push,\n            removeAt,\n            insertAt,\n            updateAt,\n            clear\n        }\n    ];\n}\nconst setLocalStorageItem = (key, value)=>{\n    const stringifiedValue = JSON.stringify(value);\n    window.localStorage.setItem(key, stringifiedValue);\n    dispatchStorageEvent(key, stringifiedValue);\n};\nconst removeLocalStorageItem = (key)=>{\n    window.localStorage.removeItem(key);\n    dispatchStorageEvent(key, null);\n};\nconst getLocalStorageItem = (key)=>{\n    return window.localStorage.getItem(key);\n};\nconst useLocalStorageSubscribe = (callback)=>{\n    window.addEventListener(\"storage\", callback);\n    return ()=>window.removeEventListener(\"storage\", callback);\n};\nconst getLocalStorageServerSnapshot = ()=>{\n    throw Error(\"useLocalStorage is a client-only hook\");\n};\nfunction useLocalStorage(key, initialValue) {\n    const getSnapshot = ()=>getLocalStorageItem(key);\n    const store = react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(useLocalStorageSubscribe, getSnapshot, getLocalStorageServerSnapshot);\n    const setState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((v)=>{\n        try {\n            const nextState = typeof v === \"function\" ? v(JSON.parse(store)) : v;\n            if (nextState === undefined || nextState === null) {\n                removeLocalStorageItem(key);\n            } else {\n                setLocalStorageItem(key, nextState);\n            }\n        } catch (e) {\n            console.warn(e);\n        }\n    }, [\n        key,\n        store\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (getLocalStorageItem(key) === null && typeof initialValue !== \"undefined\") {\n            setLocalStorageItem(key, initialValue);\n        }\n    }, [\n        key,\n        initialValue\n    ]);\n    return [\n        store ? JSON.parse(store) : initialValue,\n        setState\n    ];\n}\nfunction useLockBodyScroll() {\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        const originalStyle = window.getComputedStyle(document.body).overflow;\n        document.body.style.overflow = \"hidden\";\n        return ()=>{\n            document.body.style.overflow = originalStyle;\n        };\n    }, []);\n}\nfunction useLongPress(callback, options = {}) {\n    const { threshold = 400, onStart, onFinish, onCancel } = options;\n    const isLongPressActive = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const isPressed = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const timerId = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (typeof callback !== \"function\") {\n            return {};\n        }\n        const start = (event)=>{\n            if (!isMouseEvent(event) && !isTouchEvent(event)) return;\n            if (onStart) {\n                onStart(event);\n            }\n            isPressed.current = true;\n            timerId.current = setTimeout(()=>{\n                callback(event);\n                isLongPressActive.current = true;\n            }, threshold);\n        };\n        const cancel = (event)=>{\n            if (!isMouseEvent(event) && !isTouchEvent(event)) return;\n            if (isLongPressActive.current) {\n                if (onFinish) {\n                    onFinish(event);\n                }\n            } else if (isPressed.current) {\n                if (onCancel) {\n                    onCancel(event);\n                }\n            }\n            isLongPressActive.current = false;\n            isPressed.current = false;\n            if (timerId.current) {\n                window.clearTimeout(timerId.current);\n            }\n        };\n        const mouseHandlers = {\n            onMouseDown: start,\n            onMouseUp: cancel,\n            onMouseLeave: cancel\n        };\n        const touchHandlers = {\n            onTouchStart: start,\n            onTouchEnd: cancel\n        };\n        return {\n            ...mouseHandlers,\n            ...touchHandlers\n        };\n    }, [\n        callback,\n        threshold,\n        onCancel,\n        onFinish,\n        onStart\n    ]);\n}\nfunction useMap(initialState) {\n    const mapRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new Map(initialState));\n    const [, reRender] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer((x)=>x + 1, 0);\n    mapRef.current.set = (...args)=>{\n        Map.prototype.set.apply(mapRef.current, args);\n        reRender();\n        return mapRef.current;\n    };\n    mapRef.current.clear = (...args)=>{\n        Map.prototype.clear.apply(mapRef.current, args);\n        reRender();\n    };\n    mapRef.current.delete = (...args)=>{\n        const res = Map.prototype.delete.apply(mapRef.current, args);\n        reRender();\n        return res;\n    };\n    return mapRef.current;\n}\nfunction useMeasure() {\n    const [dimensions, setDimensions] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        width: null,\n        height: null\n    });\n    const previousObserver = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const customRef = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        if (previousObserver.current) {\n            previousObserver.current.disconnect();\n            previousObserver.current = null;\n        }\n        if (node?.nodeType === Node.ELEMENT_NODE) {\n            const observer = new ResizeObserver(([entry])=>{\n                if (entry && entry.borderBoxSize) {\n                    const { inlineSize: width, blockSize: height } = entry.borderBoxSize[0];\n                    setDimensions({\n                        width,\n                        height\n                    });\n                }\n            });\n            observer.observe(node);\n            previousObserver.current = observer;\n        }\n    }, []);\n    return [\n        customRef,\n        dimensions\n    ];\n}\nfunction useMediaQuery(query) {\n    const subscribe = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((callback)=>{\n        const matchMedia = window.matchMedia(query);\n        matchMedia.addEventListener(\"change\", callback);\n        return ()=>{\n            matchMedia.removeEventListener(\"change\", callback);\n        };\n    }, [\n        query\n    ]);\n    const getSnapshot = ()=>{\n        return window.matchMedia(query).matches;\n    };\n    const getServerSnapshot = ()=>{\n        throw Error(\"useMediaQuery is a client-only hook\");\n    };\n    return react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n}\nfunction useMouse() {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        x: 0,\n        y: 0,\n        elementX: 0,\n        elementY: 0,\n        elementPositionX: 0,\n        elementPositionY: 0\n    });\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        const handleMouseMove = (event)=>{\n            let newState = {\n                x: event.pageX,\n                y: event.pageY\n            };\n            if (ref.current?.nodeType === Node.ELEMENT_NODE) {\n                const { left, top } = ref.current.getBoundingClientRect();\n                const elementPositionX = left + window.scrollX;\n                const elementPositionY = top + window.scrollY;\n                const elementX = event.pageX - elementPositionX;\n                const elementY = event.pageY - elementPositionY;\n                newState.elementX = elementX;\n                newState.elementY = elementY;\n                newState.elementPositionX = elementPositionX;\n                newState.elementPositionY = elementPositionY;\n            }\n            setState((s)=>{\n                return {\n                    ...s,\n                    ...newState\n                };\n            });\n        };\n        document.addEventListener(\"mousemove\", handleMouseMove);\n        return ()=>{\n            document.removeEventListener(\"mousemove\", handleMouseMove);\n        };\n    }, []);\n    return [\n        state,\n        ref\n    ];\n}\nconst getConnection = ()=>{\n    return navigator?.connection || navigator?.mozConnection || navigator?.webkitConnection;\n};\nconst useNetworkStateSubscribe = (callback)=>{\n    window.addEventListener(\"online\", callback, {\n        passive: true\n    });\n    window.addEventListener(\"offline\", callback, {\n        passive: true\n    });\n    const connection = getConnection();\n    if (connection) {\n        connection.addEventListener(\"change\", callback, {\n            passive: true\n        });\n    }\n    return ()=>{\n        window.removeEventListener(\"online\", callback);\n        window.removeEventListener(\"offline\", callback);\n        if (connection) {\n            connection.removeEventListener(\"change\", callback);\n        }\n    };\n};\nconst getNetworkStateServerSnapshot = ()=>{\n    throw Error(\"useNetworkState is a client-only hook\");\n};\nfunction useNetworkState() {\n    const cache = react__WEBPACK_IMPORTED_MODULE_0__.useRef({});\n    const getSnapshot = ()=>{\n        const online = navigator.onLine;\n        const connection = getConnection();\n        const nextState = {\n            online,\n            downlink: connection?.downlink,\n            downlinkMax: connection?.downlinkMax,\n            effectiveType: connection?.effectiveType,\n            rtt: connection?.rtt,\n            saveData: connection?.saveData,\n            type: connection?.type\n        };\n        if (isShallowEqual(cache.current, nextState)) {\n            return cache.current;\n        } else {\n            cache.current = nextState;\n            return nextState;\n        }\n    };\n    return react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(useNetworkStateSubscribe, getSnapshot, getNetworkStateServerSnapshot);\n}\nfunction useObjectState(initialValue) {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialValue);\n    const handleUpdate = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((arg)=>{\n        if (typeof arg === \"function\") {\n            setState((s)=>{\n                const newState = arg(s);\n                if (isPlainObject(newState)) {\n                    return {\n                        ...s,\n                        ...newState\n                    };\n                }\n            });\n        }\n        if (isPlainObject(arg)) {\n            setState((s)=>({\n                    ...s,\n                    ...arg\n                }));\n        }\n    }, []);\n    return [\n        state,\n        handleUpdate\n    ];\n}\nfunction useOrientation() {\n    const [orientation, setOrientation] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        angle: 0,\n        type: \"landscape-primary\"\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        const handleChange = ()=>{\n            const { angle, type } = window.screen.orientation;\n            setOrientation({\n                angle,\n                type\n            });\n        };\n        const handle_orientationchange = ()=>{\n            setOrientation({\n                type: \"UNKNOWN\",\n                angle: window.orientation\n            });\n        };\n        if (window.screen?.orientation) {\n            handleChange();\n            window.screen.orientation.addEventListener(\"change\", handleChange);\n        } else {\n            handle_orientationchange();\n            window.addEventListener(\"orientationchange\", handle_orientationchange);\n        }\n        return ()=>{\n            if (window.screen?.orientation) {\n                window.screen.orientation.removeEventListener(\"change\", handleChange);\n            } else {\n                window.removeEventListener(\"orientationchange\", handle_orientationchange);\n            }\n        };\n    }, []);\n    return orientation;\n}\nconst usePreferredLanguageSubscribe = (cb)=>{\n    window.addEventListener(\"languagechange\", cb);\n    return ()=>window.removeEventListener(\"languagechange\", cb);\n};\nconst getPreferredLanguageSnapshot = ()=>{\n    return navigator.language;\n};\nconst getPreferredLanguageServerSnapshot = ()=>{\n    throw Error(\"usePreferredLanguage is a client-only hook\");\n};\nfunction usePreferredLanguage() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(usePreferredLanguageSubscribe, getPreferredLanguageSnapshot, getPreferredLanguageServerSnapshot);\n}\nfunction usePrevious(value) {\n    const [current, setCurrent] = react__WEBPACK_IMPORTED_MODULE_0__.useState(value);\n    const [previous, setPrevious] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    if (value !== current) {\n        setPrevious(current);\n        setCurrent(value);\n    }\n    return previous;\n}\nfunction useQueue(initialValue = []) {\n    const [queue, setQueue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialValue);\n    const add = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((element)=>{\n        setQueue((q)=>[\n                ...q,\n                element\n            ]);\n    }, []);\n    const remove = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        let removedElement;\n        setQueue(([first, ...q])=>{\n            removedElement = first;\n            return q;\n        });\n        return removedElement;\n    }, []);\n    const clear = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        setQueue([]);\n    }, []);\n    return {\n        add,\n        remove,\n        clear,\n        first: queue[0],\n        last: queue[queue.length - 1],\n        size: queue.length,\n        queue\n    };\n}\nfunction useRenderCount() {\n    const count = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    count.current++;\n    return count.current;\n}\nfunction useRenderInfo(name = \"Unknown\") {\n    const count = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const lastRender = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const now = Date.now();\n    count.current++;\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        lastRender.current = Date.now();\n    });\n    const sinceLastRender = lastRender.current ? now - lastRender.current : 0;\n    if (true) {\n        const info = {\n            name,\n            renders: count.current,\n            sinceLastRender,\n            timestamp: now\n        };\n        console.log(info);\n        return info;\n    }\n}\nfunction useScript(src, options = {}) {\n    const [status, setStatus] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"loading\");\n    const optionsRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(options);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let script = document.querySelector(`script[src=\"${src}\"]`);\n        const domStatus = script?.getAttribute(\"data-status\");\n        if (domStatus) {\n            setStatus(domStatus);\n            return;\n        }\n        if (script === null) {\n            script = document.createElement(\"script\");\n            script.src = src;\n            script.async = true;\n            script.setAttribute(\"data-status\", \"loading\");\n            document.body.appendChild(script);\n            const handleScriptLoad = ()=>{\n                script.setAttribute(\"data-status\", \"ready\");\n                setStatus(\"ready\");\n                removeEventListeners();\n            };\n            const handleScriptError = ()=>{\n                script.setAttribute(\"data-status\", \"error\");\n                setStatus(\"error\");\n                removeEventListeners();\n            };\n            const removeEventListeners = ()=>{\n                script.removeEventListener(\"load\", handleScriptLoad);\n                script.removeEventListener(\"error\", handleScriptError);\n            };\n            script.addEventListener(\"load\", handleScriptLoad);\n            script.addEventListener(\"error\", handleScriptError);\n            const removeOnUnmount = optionsRef.current.removeOnUnmount;\n            return ()=>{\n                if (removeOnUnmount === true) {\n                    script.remove();\n                    removeEventListeners();\n                }\n            };\n        } else {\n            setStatus(\"unknown\");\n        }\n    }, [\n        src\n    ]);\n    return status;\n}\nconst setSessionStorageItem = (key, value)=>{\n    const stringifiedValue = JSON.stringify(value);\n    window.sessionStorage.setItem(key, stringifiedValue);\n    dispatchStorageEvent(key, stringifiedValue);\n};\nconst removeSessionStorageItem = (key)=>{\n    window.sessionStorage.removeItem(key);\n    dispatchStorageEvent(key, null);\n};\nconst getSessionStorageItem = (key)=>{\n    return window.sessionStorage.getItem(key);\n};\nconst useSessionStorageSubscribe = (callback)=>{\n    window.addEventListener(\"storage\", callback);\n    return ()=>window.removeEventListener(\"storage\", callback);\n};\nconst getSessionStorageServerSnapshot = ()=>{\n    throw Error(\"useSessionStorage is a client-only hook\");\n};\nfunction useSessionStorage(key, initialValue) {\n    const getSnapshot = ()=>getSessionStorageItem(key);\n    const store = react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(useSessionStorageSubscribe, getSnapshot, getSessionStorageServerSnapshot);\n    const setState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((v)=>{\n        try {\n            const nextState = typeof v === \"function\" ? v(JSON.parse(store)) : v;\n            if (nextState === undefined || nextState === null) {\n                removeSessionStorageItem(key);\n            } else {\n                setSessionStorageItem(key, nextState);\n            }\n        } catch (e) {\n            console.warn(e);\n        }\n    }, [\n        key,\n        store\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (getSessionStorageItem(key) === null && typeof initialValue !== \"undefined\") {\n            setSessionStorageItem(key, initialValue);\n        }\n    }, [\n        key,\n        initialValue\n    ]);\n    return [\n        store ? JSON.parse(store) : initialValue,\n        setState\n    ];\n}\nfunction useSet(values) {\n    const setRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new Set(values));\n    const [, reRender] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer((x)=>x + 1, 0);\n    setRef.current.add = (...args)=>{\n        const res = Set.prototype.add.apply(setRef.current, args);\n        reRender();\n        return res;\n    };\n    setRef.current.clear = (...args)=>{\n        Set.prototype.clear.apply(setRef.current, args);\n        reRender();\n    };\n    setRef.current.delete = (...args)=>{\n        const res = Set.prototype.delete.apply(setRef.current, args);\n        reRender();\n        return res;\n    };\n    return setRef.current;\n}\nfunction useThrottle(value, interval = 500) {\n    const [throttledValue, setThrottledValue] = react__WEBPACK_IMPORTED_MODULE_0__.useState(value);\n    const lastUpdated = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const now = Date.now();\n        if (lastUpdated.current && now >= lastUpdated.current + interval) {\n            lastUpdated.current = now;\n            setThrottledValue(value);\n        } else {\n            const id = window.setTimeout(()=>{\n                lastUpdated.current = now;\n                setThrottledValue(value);\n            }, interval);\n            return ()=>window.clearTimeout(id);\n        }\n    }, [\n        value,\n        interval\n    ]);\n    return throttledValue;\n}\nfunction useToggle(initialValue) {\n    const [on, setOn] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n        if (typeof initialValue === \"boolean\") {\n            return initialValue;\n        }\n        return Boolean(initialValue);\n    });\n    const handleToggle = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((value)=>{\n        if (typeof value === \"boolean\") {\n            return setOn(value);\n        }\n        return setOn((v)=>!v);\n    }, []);\n    return [\n        on,\n        handleToggle\n    ];\n}\nconst useVisibilityChangeSubscribe = (callback)=>{\n    document.addEventListener(\"visibilitychange\", callback);\n    return ()=>{\n        document.removeEventListener(\"visibilitychange\", callback);\n    };\n};\nconst getVisibilityChangeSnapshot = ()=>{\n    return document.visibilityState;\n};\nconst getVisibilityChangeServerSnapshot = ()=>{\n    throw Error(\"useVisibilityChange is a client-only hook\");\n};\nfunction useVisibilityChange() {\n    const visibilityState = react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(useVisibilityChangeSubscribe, getVisibilityChangeSnapshot, getVisibilityChangeServerSnapshot);\n    return visibilityState === \"visible\";\n}\nfunction useWindowScroll() {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        x: null,\n        y: null\n    });\n    const scrollTo = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((...args)=>{\n        if (typeof args[0] === \"object\") {\n            window.scrollTo(args[0]);\n        } else if (typeof args[0] === \"number\" && typeof args[1] === \"number\") {\n            window.scrollTo(args[0], args[1]);\n        } else {\n            throw new Error(`Invalid arguments passed to scrollTo. See here for more info. https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo`);\n        }\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        const handleScroll = ()=>{\n            setState({\n                x: window.scrollX,\n                y: window.scrollY\n            });\n        };\n        handleScroll();\n        window.addEventListener(\"scroll\", handleScroll);\n        return ()=>{\n            window.removeEventListener(\"scroll\", handleScroll);\n        };\n    }, []);\n    return [\n        state,\n        scrollTo\n    ];\n}\nfunction useWindowSize() {\n    const [size, setSize] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        width: null,\n        height: null\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        const handleResize = ()=>{\n            setSize({\n                width: window.innerWidth,\n                height: window.innerHeight\n            });\n        };\n        handleResize();\n        window.addEventListener(\"resize\", handleResize);\n        return ()=>{\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n    return size;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@uidotdev/usehooks/index.js\n");

/***/ })

};
;